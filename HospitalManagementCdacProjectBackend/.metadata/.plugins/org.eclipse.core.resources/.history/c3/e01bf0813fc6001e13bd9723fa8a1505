package com.app.controllers;



	@CrossOrigi
	@RestController@PermitAll @RequestMapping("/api/user")
	public class UserController {
		@Autowired
		UserServices  services;
		@Autowired
	    private JWTUtility jwtUtility;

	    @Autowired
	    private AuthenticationManager authenticationManager;

	    @Autowired
	    private UserDetailsService userService;
	    
	  
		//
	  
		@PostMapping("/authenticate")
		public ResponseEntity<?> authenticateUser(@RequestBody EmployeeUserDataBacking useData) throws Exception { 
			
			//token generation code 
			try {
	            authenticationManager.authenticate(
	                    new UsernamePasswordAuthenticationToken(
	                    		useData.getEmail(),
	                    		useData.getPassword()
	                    )
	            );
	        } catch (BadCredentialsException e) {
	            throw new Exception("INVALID_CREDENTIALS", e);
	        }

	        final UserDetails userDetails
	                = userService.loadUserByUsername(useData.getEmail());

	        final String token =
	                jwtUtility.generateToken(userDetails);

			
			EmployeeUserDataBacking user=services.getUserByEmailAndPassword(useData);
			if(user!=null) {
				if(user.getPassword()!=null&&user.getPassword().equals(useData.getPassword())) {
					user.setToken(token);
					return Response.success(user);
				}
					
				return Response.error("invalid_password");
			}
			else
			return Response.error("invalid_user");
			
		}
		@PostMapping("/emailExists")
		public ResponseEntity<?> checkIfEmailExists(@RequestBody EmployeeUserDataBacking useData ){
			Boolean emailExists=services.checkIfEmailExists(useData);
			if(emailExists==true)
			return Response.success("DUPLICATE_EMAIL");
			else
			return Response.success("UNIQUE_EMAIL");
		}
		
		@PostMapping("/validateSecurityAnswer")
		public ResponseEntity<?> checkIfUserExistByEmailAndSecurity(@RequestBody EmployeeUserDataBacking useData ){
			Boolean emailExists=services.checkByEmailAndSecurity(useData);
			if(emailExists==true)
			return Response.success("VALID");
			else
			return Response.success("INVALID");
		}
		@PostMapping("/updatePassword")
		public ResponseEntity<?> updatePassword(@RequestBody EmployeeUserDataBacking useData ){
			Boolean emailExists=services.updatePassword(useData);
			if(emailExists==true)
			return Response.success("PASSWORD_CHANGED");
			else
			return Response.success("INVALID");
		}
		
		

	}

