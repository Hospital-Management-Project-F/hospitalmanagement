package com.app.dtos;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Access;

import com.app.entities.Patient;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor 
	@Getter 
	@Setter 
	@ToString 
	@AllArgsConstructor
	@JsonInclude(value = Include.NON_NULL)
	public class PatientDto {
		
		    private int userId;
			private String firstName;
			private String lastName;
			private String email;
			private String gender;
			private String address;
			@JsonProperty(access = com.fasterxml.jackson.annotation.JsonProperty.Access.WRITE_ONLY)
			private String password;
			private String role;
			private String mobile;
			private String securityQue;
			private String securityAns;
			
	//********************Patient extra Details*************************************************
			
			private int patientId;
		
			private LocalDate dateOfAdmission;
			private LocalDate dateOfAdmission;
			private int wardId;
			private int doctorId;
			private String bloodGroup;
			private String prescription;
			private int bedAlloted;
			private String paymentStatus;
			private String patientProblem;
			private String doctorFirstName;
			private String doctorLastName;
			private String type;
			private String doctorCellNo;
			//medicine assigned list
			
			
			
			public static List<PatientDto> createPatient(List<Patient> employees){
				List<PatientDto> employeeDetails= new ArrayList<PatientDto>();
				for(Patient p:employees) {
					PatientDto createdPatient= new PatientDto();
					createdPatient.setFirstName(p.getUser().getFirstName());
					createdPatient.setLastName(p.getUser().getLastName());
					createdPatient.setRole(p.getUser().getRole());
					createdPatient.setCellNo(p.getUser().getmobile());
					createdPatient.setDob(p.getDob());
					createdPatient.setEmail(p.getUser().getEmail());
					createdPatient.setPatId(p.getId());
					createdPatient.setUserId(p.getUser().getId());
					createdPatient.setWardId(p.getWard().getId());
					createdPatient.setDoctorId(p.getDoctor().getId());
					createdPatient.setDateOfAdmission(p.getDateOfAdmission());
					createdPatient.setBloodGroup(p.getBloodGroup());
					if(p.getPrescription()==null) {
						createdPatient.setPrescription("doctor will prescribe you");//to see if prescription is empty or not 
					}else {
						createdPatient.setPrescription(p.getPrescription());
					}

					createdPatient.setBedAlloted(p.getBedAlloted());
					createdPatient.setPaymentStatus(p.getPaymentStatus());
					createdPatient.setPatientProblem(p.getPatientProblem());
					createdPatient.setDoctorFirstName(p.getDoctor().getEmployee().getUser().getFirstName());
					createdPatient.setDoctorLastName(p.getDoctor().getEmployee().getUser().getLastName());
					createdPatient.setPrescription(p.getPrescription());
					createdPatient.setType(p.getWard().getType());
					createdPatient.setDoctorCellNo(p.getUser().getCellNo());
					employeeDetails.add(createdPatient);
				}
				
				return employeeDetails;
			}
			//=====================================patient to send to front end
			
			public static PatientDataBacking getByIdPatient(Patient p) {
				PatientDataBacking createdPatient=new PatientDataBacking();
				createdPatient.setFirstName(p.getUser().getFirstName());
				createdPatient.setLastName(p.getUser().getLastName());
				createdPatient.setRole(p.getUser().getRole());
				createdPatient.setCellNo(p.getUser().getCellNo());
				createdPatient.setDob(p.getDob());
				createdPatient.setEmail(p.getUser().getEmail());
				createdPatient.setPatId(p.getId());
				createdPatient.setUserId(p.getUser().getId());
				createdPatient.setWardId(p.getWard().getId());
				createdPatient.setDoctorId(p.getDoctor().getId());
				createdPatient.setDateOfAdmission(p.getDateOfAdmission());
				createdPatient.setBloodGroup(p.getBloodGroup());
				createdPatient.setPrescription(p.getPrescription());
				createdPatient.setBedAlloted(p.getBedAlloted());
				createdPatient.setPaymentStatus(p.getPaymentStatus());
				createdPatient.setPatientProblem(p.getPatientProblem());
				createdPatient.setDoctorFirstName(p.getDoctor().getEmployee().getUser().getFirstName());
				createdPatient.setDoctorLastName(p.getDoctor().getEmployee().getUser().getLastName());
				createdPatient.setPrescription(p.getPrescription());
				createdPatient.setType(p.getWard().getType());
				createdPatient.setDoctorCellNo(p.getDoctor().getEmployee().getUser().getCellNo());
				
				return createdPatient;
				
			}
			
			
			
	//***********************************patients of doctor**********************************
			public static List<PatientDataBacking> createPatientsOfDoctor(List<Patient> employees,int doctorId){
				List<PatientDataBacking> employeeDetails= new ArrayList<PatientDataBacking>();
				for(Patient p:employees) {
					if(p.getDoctor().getId()==doctorId) {
						
						PatientDataBacking createdPatient= new PatientDataBacking();
						createdPatient.setFirstName(p.getUser().getFirstName());
						createdPatient.setLastName(p.getUser().getLastName());
						createdPatient.setRole(p.getUser().getRole());
						createdPatient.setCellNo(p.getUser().getCellNo());
						createdPatient.setDob(p.getDob());
						createdPatient.setEmail(p.getUser().getEmail());
						createdPatient.setPatId(p.getId());
						createdPatient.setUserId(p.getUser().getId());
						createdPatient.setWardId(p.getWard().getId());
						createdPatient.setDoctorId(p.getDoctor().getId());
						createdPatient.setDateOfAdmission(p.getDateOfAdmission());
						createdPatient.setBloodGroup(p.getBloodGroup());
						if(p.getPrescription()==null) {
							createdPatient.setPrescription("doctor will prescribe you");//to see if prescription is empty or not 
						}else {
							createdPatient.setPrescription(p.getPrescription());
						}

						createdPatient.setBedAlloted(p.getBedAlloted());
						createdPatient.setPaymentStatus(p.getPaymentStatus());
						createdPatient.setPatientProblem(p.getPatientProblem());
						createdPatient.setDoctorFirstName(p.getDoctor().getEmployee().getUser().getFirstName());
						createdPatient.setDoctorLastName(p.getDoctor().getEmployee().getUser().getLastName());
						createdPatient.setPrescription(p.getPrescription());
						createdPatient.setType(p.getWard().getType());
						createdPatient.setDoctorCellNo(p.getUser().getCellNo());
						employeeDetails.add(createdPatient);
					}

					}
								
				return employeeDetails;
			}
				
			
	//*********************************************************************
			
			
	//***************************************************************************
			
			
	///*****************************to update an employee*********************
			
}		

	



